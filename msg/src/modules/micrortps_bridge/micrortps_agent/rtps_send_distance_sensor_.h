// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file rtps_send_distance_sensor_.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _RTPS_SEND_DISTANCE_SENSOR__H_
#define _RTPS_SEND_DISTANCE_SENSOR__H_

// TODO Poner en el contexto.

#include <stdint.h>
#include <array>
#include <string>
#include <vector>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(rtps_send_distance_sensor__SOURCE)
#define rtps_send_distance_sensor__DllAPI __declspec( dllexport )
#else
#define rtps_send_distance_sensor__DllAPI __declspec( dllimport )
#endif // rtps_send_distance_sensor__SOURCE
#else
#define rtps_send_distance_sensor__DllAPI
#endif
#else
#define rtps_send_distance_sensor__DllAPI
#endif // _WIN32

namespace eprosima
{
    namespace fastcdr
    {
        class Cdr;
    }
}

/*!
 * @brief This class represents the structure rtps_send_distance_sensor_ defined by the user in the IDL file.
 * @ingroup RTPS_SEND_DISTANCE_SENSOR_
 */
class rtps_send_distance_sensor_
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport rtps_send_distance_sensor_();
    
    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~rtps_send_distance_sensor_();
    
    /*!
     * @brief Copy constructor.
     * @param x Reference to the object rtps_send_distance_sensor_ that will be copied.
     */
    eProsima_user_DllExport rtps_send_distance_sensor_(const rtps_send_distance_sensor_ &x);
    
    /*!
     * @brief Move constructor.
     * @param x Reference to the object rtps_send_distance_sensor_ that will be copied.
     */
    eProsima_user_DllExport rtps_send_distance_sensor_(rtps_send_distance_sensor_ &&x);
    
    /*!
     * @brief Copy assignment.
     * @param x Reference to the object rtps_send_distance_sensor_ that will be copied.
     */
    eProsima_user_DllExport rtps_send_distance_sensor_& operator=(const rtps_send_distance_sensor_ &x);
    
    /*!
     * @brief Move assignment.
     * @param x Reference to the object rtps_send_distance_sensor_ that will be copied.
     */
    eProsima_user_DllExport rtps_send_distance_sensor_& operator=(rtps_send_distance_sensor_ &&x);
    
    /*!
     * @brief This function sets a value in member timestamp
     * @param _timestamp New value for member timestamp
     */
    inline eProsima_user_DllExport void timestamp(uint64_t _timestamp)
    {
        m_timestamp = _timestamp;
    }

    /*!
     * @brief This function returns the value of member timestamp
     * @return Value of member timestamp
     */
    inline eProsima_user_DllExport uint64_t timestamp() const
    {
        return m_timestamp;
    }

    /*!
     * @brief This function returns a reference to member timestamp
     * @return Reference to member timestamp
     */
    inline eProsima_user_DllExport uint64_t& timestamp()
    {
        return m_timestamp;
    }
    /*!
     * @brief This function copies the value in member current_distance
     * @param _current_distance New value to be copied in member current_distance
     */
    inline eProsima_user_DllExport void current_distance(const std::array<float, 3> &_current_distance)
    {
        m_current_distance = _current_distance;
    }

    /*!
     * @brief This function moves the value in member current_distance
     * @param _current_distance New value to be moved in member current_distance
     */
    inline eProsima_user_DllExport void current_distance(std::array<float, 3> &&_current_distance)
    {
        m_current_distance = std::move(_current_distance);
    }

    /*!
     * @brief This function returns a constant reference to member current_distance
     * @return Constant reference to member current_distance
     */
    inline eProsima_user_DllExport const std::array<float, 3>& current_distance() const
    {
        return m_current_distance;
    }

    /*!
     * @brief This function returns a reference to member current_distance
     * @return Reference to member current_distance
     */
    inline eProsima_user_DllExport std::array<float, 3>& current_distance()
    {
        return m_current_distance;
    }
    /*!
     * @brief This function sets a value in member n_ultrasound
     * @param _n_ultrasound New value for member n_ultrasound
     */
    inline eProsima_user_DllExport void n_ultrasound(uint8_t _n_ultrasound)
    {
        m_n_ultrasound = _n_ultrasound;
    }

    /*!
     * @brief This function returns the value of member n_ultrasound
     * @return Value of member n_ultrasound
     */
    inline eProsima_user_DllExport uint8_t n_ultrasound() const
    {
        return m_n_ultrasound;
    }

    /*!
     * @brief This function returns a reference to member n_ultrasound
     * @return Reference to member n_ultrasound
     */
    inline eProsima_user_DllExport uint8_t& n_ultrasound()
    {
        return m_n_ultrasound;
    }
    
    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(const rtps_send_distance_sensor_& data, size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
    
private:
    uint64_t m_timestamp;
    std::array<float, 3> m_current_distance;
    uint8_t m_n_ultrasound;
};

#endif // _RTPS_SEND_DISTANCE_SENSOR__H_