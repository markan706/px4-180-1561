// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file rtps_send_distance_sensor_Subscriber.cpp
 * This file contains the implementation of the subscriber functions.
 *
 * This file was generated by the tool fastcdrgen.
 */

#include <fastrtps/participant/Participant.h>
#include <fastrtps/attributes/ParticipantAttributes.h>
#include <fastrtps/subscriber/Subscriber.h>
#include <fastrtps/attributes/SubscriberAttributes.h>

#include <fastrtps/Domain.h>

#include "rtps_send_distance_sensor_Subscriber.h"

using namespace eprosima::fastrtps;
using namespace eprosima::fastrtps::rtps;

rtps_send_distance_sensor_Subscriber::rtps_send_distance_sensor_Subscriber() : mp_participant(nullptr), mp_subscriber(nullptr) {}

rtps_send_distance_sensor_Subscriber::~rtps_send_distance_sensor_Subscriber() {	Domain::removeParticipant(mp_participant);}

bool rtps_send_distance_sensor_Subscriber::init()
{
    // Create RTPSParticipant

    ParticipantAttributes PParam;
    PParam.rtps.builtin.domainId = 0; //MUST BE THE SAME AS IN THE PUBLISHER
    PParam.rtps.builtin.leaseDuration = c_TimeInfinite;
    PParam.rtps.setName("Participant_subscriber"); //You can put the name you want
    mp_participant = Domain::createParticipant(PParam);
    if(mp_participant == nullptr)
    {
        return false;
    }

    //Register the type

    Domain::registerType(mp_participant, static_cast<TopicDataType*>(&myType));

    // Create Subscriber

    SubscriberAttributes Rparam;
    Rparam.topic.topicKind = NO_KEY;
    Rparam.topic.topicDataType = myType.getName(); //Must be registered before the creation of the subscriber
    Rparam.topic.topicName = "rtps_send_distance_sensor_PubSubTopic";
    mp_subscriber = Domain::createSubscriber(mp_participant,Rparam, static_cast<SubscriberListener*>(&m_listener));
    if(mp_subscriber == nullptr)
    {
        return false;
    }
    return true;
}

void rtps_send_distance_sensor_Subscriber::SubListener::onSubscriptionMatched(Subscriber* sub,MatchingInfo& info)
{
    (void)sub;

    if (info.status == MATCHED_MATCHING)
    {
        n_matched++;
        std::cout << "Subscriber matched" << std::endl;
    }
    else
    {
        n_matched--;
        std::cout << "Subscriber unmatched" << std::endl;
    }
}

void rtps_send_distance_sensor_Subscriber::SubListener::onNewDataMessage(Subscriber* sub)
{
    // Take data
    rtps_send_distance_sensor_ st;

    // if(sub->takeNextData(&st, &m_info))
    // {
    //     if(m_info.sampleKind == ALIVE)
    //     {
    //         // Print your structure data here.
    //         ++n_msg;
    //         std::cout << "Sample received, count=" << n_msg << std::endl;
    //     }
    // }

    if(sub->takeNextData(&st, &m_info))
    {
        if(m_info.sampleKind == ALIVE)
        {
            // Print your structure data here.
            ++n_msg;
            std::cout << "\n\n\n\n\n\n\n\n\n\n";
            std::cout << "Sample received, count=" << n_msg << std::endl;
            std::cout << "=============================" << std::endl;
            std::cout << "The number of ultrasound: " << (int)st.n_ultrasound();
            std::cout << ", and the timestamp: " << st.timestamp() << std::endl;
            std::cout << "The 1st ultrasound_m: " << st.current_distance().at(0) << std::endl;
            std::cout << "The 2nd ultrasound_m: " << st.current_distance().at(1) << std::endl;
            std::cout << "The 3rd ultrasound_m: " << st.current_distance().at(2) << std::endl;
            // std::cout << "accelerometer_timestamp_relative: " << st.accelerometer_timestamp_relative() << std::endl;
            // std::cout << "accelerometer_m_s2: " << st.accelerometer_m_s2().at(0);
            // std::cout << ", " << st.accelerometer_m_s2().at(1);
            // std::cout << ", " << st.accelerometer_m_s2().at(2) << std::endl;
            // std::cout << "accelerometer_integral_dt: " << st.accelerometer_integral_dt() << std::endl;
            // std::cout << "magnetometer_timestamp_relative: " << st.magnetometer_timestamp_relative() << std::endl;
            // std::cout << "magnetometer_ga: " << st.magnetometer_ga().at(0);
            // std::cout << ", " << st.magnetometer_ga().at(1);
            // std::cout << ", " << st.magnetometer_ga().at(2) << std::endl;
            // std::cout << "baro_timestamp_relative: " << st.baro_timestamp_relative() << std::endl;
            // std::cout << "baro_alt_meter: " << st.baro_alt_meter() << std::endl;
            // std::cout << "baro_temp_celcius: " << st.baro_temp_celcius() << std::endl;
        }
    }
}

void rtps_send_distance_sensor_Subscriber::run()
{
    std::cout << "Waiting for Data, press Enter to stop the Subscriber. "<<std::endl;
    std::cin.ignore();
    std::cout << "Shutting down the Subscriber." << std::endl;
}

