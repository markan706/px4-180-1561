// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file rtps_send_distance_sensor_.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "rtps_send_distance_sensor_.h"

#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

rtps_send_distance_sensor_::rtps_send_distance_sensor_()
{
    m_timestamp = 0;

    m_n_ultrasound = 0;
}

rtps_send_distance_sensor_::~rtps_send_distance_sensor_()
{
}

rtps_send_distance_sensor_::rtps_send_distance_sensor_(const rtps_send_distance_sensor_ &x)
{
    m_timestamp = x.m_timestamp;
    m_current_distance = x.m_current_distance;
    m_n_ultrasound = x.m_n_ultrasound;
}

rtps_send_distance_sensor_::rtps_send_distance_sensor_(rtps_send_distance_sensor_ &&x)
{
    m_timestamp = x.m_timestamp;
    m_current_distance = std::move(x.m_current_distance);
    m_n_ultrasound = x.m_n_ultrasound;
}

rtps_send_distance_sensor_& rtps_send_distance_sensor_::operator=(const rtps_send_distance_sensor_ &x)
{
    m_timestamp = x.m_timestamp;
    m_current_distance = x.m_current_distance;
    m_n_ultrasound = x.m_n_ultrasound;
    
    return *this;
}

rtps_send_distance_sensor_& rtps_send_distance_sensor_::operator=(rtps_send_distance_sensor_ &&x)
{
    m_timestamp = x.m_timestamp;
    m_current_distance = std::move(x.m_current_distance);
    m_n_ultrasound = x.m_n_ultrasound;
    
    return *this;
}

size_t rtps_send_distance_sensor_::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
            
    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);

    current_alignment += ((3) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    return current_alignment - initial_alignment;
}

size_t rtps_send_distance_sensor_::getCdrSerializedSize(const rtps_send_distance_sensor_& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);

    current_alignment += ((3) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    return current_alignment - initial_alignment;
}

void rtps_send_distance_sensor_::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    scdr << m_timestamp;
    scdr << m_current_distance;
    scdr << m_n_ultrasound;
}

void rtps_send_distance_sensor_::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    dcdr >> m_timestamp;
    dcdr >> m_current_distance;
    dcdr >> m_n_ultrasound;
}

size_t rtps_send_distance_sensor_::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;
            




    return current_align;
}

bool rtps_send_distance_sensor_::isKeyDefined()
{
    return false;
}

void rtps_send_distance_sensor_::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	(void) scdr;
	 
	 
	 
}